#!/bin/bash




# inclusão do progess bar direto no bds-install ---------------------------------------

# https://github.com/pollev/bash_progress_bar - See license at end of file

# Usage:
# Source this script
# enable_trapping <- optional to clean up properly if user presses ctrl-c
# setup_scroll_area <- create empty progress bar
# draw_progress_bar 10 <- advance progress bar
# draw_progress_bar 40 <- advance progress bar
# block_progress_bar 45 <- turns the progress bar yellow to indicate some action is requested from the user
# draw_progress_bar 90 <- advance progress bar
# destroy_scroll_area <- remove progress bar

# Constants
CODE_SAVE_CURSOR="\033[s"
CODE_RESTORE_CURSOR="\033[u"
CODE_CURSOR_IN_SCROLL_AREA="\033[1A"
COLOR_FG="\e[30m"
COLOR_BG="\e[42m"
COLOR_BG_BLOCKED="\e[43m"
RESTORE_FG="\e[39m"
RESTORE_BG="\e[49m"

# Variables
PROGRESS_BLOCKED="false"
TRAPPING_ENABLED="false"
TRAP_SET="false"

setup_scroll_area() {
    # If trapping is enabled, we will want to activate it whenever we setup the scroll area and remove it when we break the scroll area
    if [ "$TRAPPING_ENABLED" = "true" ]; then
        trap_on_interrupt
    fi

    lines=$(tput lines)
    let lines=$lines-1
    # Scroll down a bit to avoid visual glitch when the screen area shrinks by one row
    echo -en "\n"

    # Save cursor
    echo -en "$CODE_SAVE_CURSOR"
    # Set scroll region (this will place the cursor in the top left)
    echo -en "\033[0;${lines}r"

    # Restore cursor but ensure its inside the scrolling area
    echo -en "$CODE_RESTORE_CURSOR"
    echo -en "$CODE_CURSOR_IN_SCROLL_AREA"

    # Start empty progress bar
    draw_progress_bar 0
}

destroy_scroll_area() {
    lines=$(tput lines)
    # Save cursor
    echo -en "$CODE_SAVE_CURSOR"
    # Set scroll region (this will place the cursor in the top left)
    echo -en "\033[0;${lines}r"

    # Restore cursor but ensure its inside the scrolling area
    echo -en "$CODE_RESTORE_CURSOR"
    echo -en "$CODE_CURSOR_IN_SCROLL_AREA"

    # We are done so clear the scroll bar
    clear_progress_bar

    # Scroll down a bit to avoid visual glitch when the screen area grows by one row
    echo -en "\n\n"

    # Once the scroll area is cleared, we want to remove any trap previously set. Otherwise, ctrl+c will exit our shell
    if [ "$TRAP_SET" = "true" ]; then
        trap - INT
    fi
}

draw_progress_bar() {
    percentage=$1
    lines=$(tput lines)
    let lines=$lines
    # Save cursor
    echo -en "$CODE_SAVE_CURSOR"

    # Move cursor position to last row
    echo -en "\033[${lines};0f"

    # Clear progress bar
    tput el

    # Draw progress bar
    PROGRESS_BLOCKED="false"
    print_bar_text $percentage

    # Restore cursor position
    echo -en "$CODE_RESTORE_CURSOR"
}

block_progress_bar() {
    percentage=$1
    lines=$(tput lines)
    let lines=$lines
    # Save cursor
    echo -en "$CODE_SAVE_CURSOR"

    # Move cursor position to last row
    echo -en "\033[${lines};0f"

    # Clear progress bar
    tput el

    # Draw progress bar
    PROGRESS_BLOCKED="true"
    print_bar_text $percentage

    # Restore cursor position
    echo -en "$CODE_RESTORE_CURSOR"
}

clear_progress_bar() {
    lines=$(tput lines)
    let lines=$lines
    # Save cursor
    echo -en "$CODE_SAVE_CURSOR"

    # Move cursor position to last row
    echo -en "\033[${lines};0f"

    # clear progress bar
    tput el

    # Restore cursor position
    echo -en "$CODE_RESTORE_CURSOR"
}

print_bar_text() {
    local percentage=$1
    local cols=$(tput cols)
    let bar_size=$cols-17

    local color="${COLOR_FG}${COLOR_BG}"
    if [ "$PROGRESS_BLOCKED" = "true" ]; then
        color="${COLOR_FG}${COLOR_BG_BLOCKED}"
    fi

    # Prepare progress bar
    let complete_size=($bar_size*$percentage)/100
    let remainder_size=$bar_size-$complete_size
    progress_bar=$(echo -ne "["; echo -en "${color}"; printf_new "#" $complete_size; echo -en "${RESTORE_FG}${RESTORE_BG}"; printf_new "." $remainder_size; echo -ne "]");

    # Print progress bar
    echo -ne " Progress ${percentage}% ${progress_bar}"
}

enable_trapping() {
    TRAPPING_ENABLED="true"
}

trap_on_interrupt() {
    # If this function is called, we setup an interrupt handler to cleanup the progress bar
    TRAP_SET="true"
    trap cleanup_on_interrupt INT
}

cleanup_on_interrupt() {
    destroy_scroll_area
    exit
}

printf_new() {
    str=$1
    num=$2
    v=$(printf "%-${num}s" "$str")
    echo -ne "${v// /$str}"
}


# SPDX-License-Identifier: MIT
#
# Copyright (c) 2018--2020 Polle Vanhoof
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.



# --------------- Codigo ------------------------------

root_acess(){
if [ "$EUID" -ne 0 ]; then
echo "Você não está executando o script com root ou sudo, por favor execute de novo o com: sudo $0 $1"
exit 0
fi
}

TMP=/tmp/Minecraft-temp
mkdir $TMP >>$USUARIO/log.txt 2>&1 ;
rm -rf $TMP/level.txt >>$USUARIO/log.txt 2>&1 ;
PASTA_PRINCIPAL=/usr/opt/bds-install


json(){
     PATH_TO_INSTALL="$(cat /etc/bds-install/install.json | jq ".install.dir" | sed 's|"||g')"
     BDS="$(wget -qO- $(cat /etc/bds-install/install.json | jq ".global.url_download" | sed 's|"||g'))"
     PORTAD="$(cat /etc/bds-install/install.json | jq ".global.port" | sed 's|"||g')"
     MAPA_DO_SERVIDOR="$(cat /etc/bds-install/install.json | jq ".global.name_map" | sed 's|"||g')"
     level="$(cat /etc/bds-install/install.json | jq ".global.name_map" | sed 's|"||g')"
}
limpando(){
    rm mcpe.zip
    rm -rf mcpe/
}

installbysh23(){
    
    
    #banner
    cat banner.txt;
    # Prerequisite
    echo "  ";
draw_progress_bar 1
    #Download do arquivos servidor
    echo "Baixando o Software do BDS";
     wget "$BDS" -O $TMP/mcpe.zip >>$USUARIO/log.txt 2>&1 ;
draw_progress_bar 2
    echo "Descompactando o software do BDS";
    draw_progress_bar 5
     unzip $TMP/mcpe.zip -d $TMP/mcpe/ >>$USUARIO/log.txt 2>&1 ;
     rm -rf $TMP/mcpe.zip;
     draw_progress_bar 10

    #config
    echo "Configuração Base"
    rm -rf $TMP/mcpe/server.properties >>$USUARIO/log.txt 2>&1 ;
    rm -rf $TMP/mcpe/whitelist.json >>$USUARIO/log.txt 2>&1 ;
    cp -r $PASTA_PRINCIPALserver.properties mcpe/ >>$USUARIO/log.txt 2>&1 ;
    cp -r $PASTA_PRINCIPALwhitelist.json mcpe/ >>$USUARIO/log.txt 2>&1 ;
draw_progress_bar 15
    #Movendo
    echo "Criando e Movendo para o $PATH_TO_INSTALL"
    rm -rf $PATH_TO_INSTALL
    draw_progress_bar 20
    mkdir $PATH_TO_INSTALL
    draw_progress_bar 30
    cp -r $TMP/mcpe/* $PATH_TO_INSTALL/
    draw_progress_bar 50
    echo "Limpando alguns arquivos"
    rm -rf $TMP/mcpe/
    echo "O log está no arquivo $USUARIO/log.txt"
    draw_progress_bar 100
}
updatebysh23(){
    cat banner.txt

#Preparando
block_progress_bar 1
echo "Backup?"
read -rp "Nome do backup:  " -e -i "$(TZ=UTC+3 date +"%d-%m-%Y")" BACKUP
draw_progress_bar 20
PATH_TO_BACKUP="$HOME/MCPE-BACKUP"
echo "$PATH_TO_BACKUP"
mkdir "$PATH_TO_BACKUP"

echo "verificando se a arquivos antingos no $(pwd)"
if [[ -d $TMP/mcpe/ ]]; then
rm -rf $TMP/mcpe/
fi
if [[ -e $TMP/mcpe.zip ]];then
rm -rf $TMP/mcpe.zip
fi
draw_progress_bar 34

# backup
voltando="$(pwd)"
cd $PATH_TO_INSTALL
zip -q "$PATH_TO_BACKUP/$BACKUP.zip" -r *
cp -r * $PATH_TO_BACKUP/
cd $voltando

# BDS DOWNLOADS
draw_progress_bar 48
wget -q "$BDS" -O $TMP/mcpe.zip

# descompactando 
draw_progress_bar 50
unzip $TMP/mcpe.zip -d $TMP/mcpe > /dev/null

# configurando
if [ $? -eq 0 ];then
echo "Whitelist.json"
rm $TMP/mcpe/whitelist.json
cp $PATH_TO_BACKUP/whitelist.json $TMP/mcpe/whitelist.json
else
echo "$?"
echo "Saindo error ao extrair os arquivos"
exit 127
fi

if [ $? -eq 0 ];then
echo "Server.properties"
rm $TMP/mcpe/server.properties
cp $PATH_TO_BACKUP/server.properties $TMP/mcpe/server.properties
else
echo "Saindo error no comando anterior"
exit 127
fi

if [ $? -eq 0 ];then
echo "Mapas/Worlds"
rm -r $TMP/mcpe/worlds
cp $PATH_TO_BACKUP/worlds $TMP/mcpe/worlds
else
echo "Saindo error no comando anterior"
exit 127
fi

if [ -d $PATH_TO_INSTALL ];then
"Movendo a instalação antiga para a pasta /tmp/"
mv -f $PATH_TO_INSTALL /tmp/
fi

#movendo
cp -rf $TMP/mcpe/* "$PATH_TO_INSTALL"
limpando
}
backupbysh23(){      
if [ -e /usr/sbin/BDS ] ; then
echo "Para fazer o backup coloque sim (yes) e de [enter], caso não queira, não (no) e de [enter]"
read -rp "Vai querer fazer o backup?  " -e -i "sim" BC
    case $BC in
    sim | yes ) touch $PATH_TO_INSTALL/backup.txt -a $PATH_TO_INSTALL ; echo "Vamos configurar agora o Gdrive, precisamos fazer um login na sua conta do google. nenhum dado será amarzenado pelo script." ; sleep2 ; gdrive about  ;;
    nao | no ) exit;;
    * ) echo "não houve escolha, saindo ..."; exit
    esac
else
echo "não podemos cria agora, por favor execute primeiro o --fundo"
fi
}
ipbysh23(){
      #Comando --ip variaveis
      IP_V4=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
      SEARCH_IPV6=$(ip -6 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)
      IP_V6=$(ifconfig $SEARCH_IPV6 | grep "inet6" | awk -F' ' '{print $2}' | awk '{print $1}') 
      IP_PUBLICO=$(wget -qO- http://ipecho.net/plain)
      #Echo's
            echo "Seu IPv4 é $IP_V4 para Jogar localmente , e o Seu IPv6 é $(echo -ne $IP_V6)"
            echo " "
            echo "Caso Queira Jogar Remotamento com alguém Abra as Portas 19132 e 19133 no seu Roteador ou seu Firewall, seu IPv4 Publico é $IP_PUBLICO"
            echo "Também verifique se sua operadora ou provedor libera as portas do servidor. contate-os"
      echo " ";
}
apache2-installbysh23(){

      #Instalação do apache2
      echo "Instalando o Apache2"
       apt update >> /dev/null 2>&1 
       apt install apache2 -y >> /dev/null 2>&1 

      # Removendo pasta HTML e Adicionando denovo
      rm -rf /var/www/html/
      mkdir /var/www/html/

      # Pegando as config
      echo "Agora vamos começar a configurar o nova pagina do Apache"
      sleep 2
      echo "Vamos precicar de algumas informações como:"
      echo "Dominio caso você tenha"
      echo "nome que aparacera na Pagina. etc ..."
      sleep 3
      
      read -rp "Qual será o dominio ou nos da o IP publico: " -e -i "$(wget -qO- http://ipecho.net/plain)" IPDOMAIN
      read -rp "Qual é o nome que aparacera na pagina: " -e -i "$(cat /tmp/level.txt)" MAINSERVERNAME

      # Montando as Configurações
      sed -i "s|ENDEREÇODOSERVIDOROUIP|$IPDOMAIN|g" "$PASTA_PRINCIPALhtml-files/index.html"
      sed -i "s|MAINSERVERNAME|$MAPA_DO_SERVIDOR|g" "$PASTA_PRINCIPALhtml-files/index.html"
      sed -i "s|PORTASERVER|$PORTAD|g" "$PASTA_PRINCIPALhtml-files/index.html"

      # Movendo as configurações
      cp -rf $PASTA_PRINCIPALhtml-files/* /var/www/html/
}
externobysh23(){
      
      # vsftp and Samba
       apt install -y vsftpd samba >> /dev/null 2>&1 ;

      #config
      sed -i "s|PATHTOISNTALL|$PATH_TO_INSTALL|g" "$PASTA_PRINCIPALsmb.conf"
      sed -i "s|root||g" "/etc/ftpusers"

      rm /etc/samba/smb.conf
      cp -rf $PASTA_PRINCIPALsmb.conf /etc/samba/
      cp -rf $PASTA_PRINCIPALvsftp.conf /etc/vsftpd.conf

      service smbd restart
      service vsftpd restart

echo "Para adicionar um usuario no Smb use smbpasswd -a username"
echo "Para usar o ftp não precisar de nada a mais para configura só ter um usuario no sistema"

}

#

fundobysh23(){
    echo " "
        rm /usr/sbin/BDS
        rm -rf /tmp/level.txt
        rm -rf /sbin/mcpe
        rm -rf /usr/sbin/BDS
        rm -rf /usr/sbin/mcpe
        
            # -- Config --
                cp $PASTA_PRINCIPALfundo.sh /tmp/
                MINE2Sh23="/home/MCPE-Backups"
                read -rp "Qual é o ID da pasta no google Drive caso fará backup para A Nuven (Exemplo: 1-FWzQJWhhJK_00ETU4uVOg6R5c5p_yMP)? " -e -i "" ID
                read -rp "Aonde você vai quere colocar os Backups Locais (Caso queira)? " -e -i "$MINE2Sh23" MINE2Sh23
                mkdir $MINE2Sh23
                sed -i "s|ID|$ID|g" "/tmp/fundo.sh";
                sed -i "s|MINE|$PATH_TO_INSTALL|g" "/tmp/fundo.sh";
                sed -i "s|NAME|$MAPA_DO_SERVIDOR|g" "/tmp/fundo.sh";
                sed -i "s|2MINESh23|$MINE2Sh23|g" "/tmp/fundo.sh";
                cp -rf /tmp/fundo.sh /usr/sbin/BDS
                 chmod a+x /usr/sbin/BDS
            # -- Config --
    echo " "
}
sistemabysh23(){
      
      wget "https://drive.google.com/uc?export=download&id=1UlemfOSQUxbxTFDriAeDV7o1hRwXcS43" -O /usr/bin/gdrive >>$USUARIO/log.txt 2>&1 ;
      chmod a+x /usr/bin/gdrive

# ---------------------------------------    
    echo " "
        rm -rf /usr/sbin/mcpe-server
            rm -rf /sbin/mcpe-server
            rm -rf /sbin/BDS
        rm -rf /usr/sbin/BDS
        rm -rf /tmp/level.txt
        
            # -- Config --
                cp $PASTA_PRINCIPALfundo.sh /tmp/
                MINE2Sh23="/var/www/html"
                
                if [[ -e $TMP/IDs.txt ]];then
                ID="$(cat IDs.txt)"
                else
                    read -rp "Qual é o ID da pasta no google Drive caso fará backup para A Nuven (Exemplo: 1-FWzQJWhhJK_00ETU4uVOg6R5c5p_yMP)? " -e -i "" ID
                    echo "$ID" > IDs.txt
                    dos2unix $TMP/IDs.txt
                fi
                if [[ -e $TMP/pasta.txt ]];then
                    MINE2Sh23="$(cat $HOME/pasta.txt)"
                else
                    read -rp "Aonde você vai quere colocar os Backups Locais (Caso queira)? " -e -i "$MINE2Sh23" MINE2Sh23
                    echo $MINE2Sh23 > $PASTA_PRINCIPALpasta.txt
                    dos2unix $TMP/pasta.txt
                fi
                mkdir $MINE2Sh23
                sed -i "s|IDSh23|$ID|g" "/tmp/fundo.sh";
                sed -i "s|MINESh23|$PATH_TO_INSTALL|g" "/tmp/fundo.sh";
                sed -i "s|NAMESh23|$MAPA_DO_SERVIDOR|g" "/tmp/fundo.sh";
                sed -i "s|MINE2Sh23|$MINE2Sh23|g" "/tmp/fundo.sh";
                cp -rf /tmp/fundo.sh /usr/sbin/BDS
                 chmod a+x /usr/sbin/BDS
            # -- Config --
    echo " "
    
    # ---------------------------------------

    echo "Iniciando as Configurações do arquivo para Inicialização junto com o Sistema"
         cp $PASTA_PRINCIPALstart-on-system.sh /tmp/systemsh23.sh;
            sed -i "s|IDSh23|$ID|g" "/tmp/systemsh23.sh";
            sed -i "s|MINESh23|$PATH_TO_INSTALL|g" "/tmp/systemsh23.sh";
            sed -i "s|NAMESh23|$MAPA_DO_SERVIDOR|g" "/tmp/systemsh23.sh";
            sed -i "s|MINE2Sh23|$MINE2Sh23|g" "/tmp/systemsh23.sh";
         cp "/tmp/systemsh23.sh" "/etc/init.d/BDS";
    echo "copiando o arquivo";
         chmod a+x /etc/init.d/BDS;
        update-rc.d BDS defaults
        update-rc.d BDS enable
    echo "pronto ele inicia junto com sistema, o comando abaixo pode ajudar"
    echo " "
    echo ' service BDS start|stop|restart'
    echo " "
    echo "Para desativar o Inicio altomatico execute $0 --remover-service ou  $0 -R"
    echo "Para quem quiser iniciar manualmente:"
    echo "Execute 'screen BDS'"
    echo "E para deixar o servidor em segundo plano aperte CRTL + A + D. deixara em segundo plano para voltar basta executar o comando screen -r"
}
#
removerservicesh23(){
update-rc.d BDS defaults-disabled
update-rc.d BDS disable
rm -rf /etc/init.d/BDS
}

crontabsh23(){


read -rp "Por favor nos informe uma data via crontab!(Exemplo 0 23 * * *, voce tamém pode usar o https://crontab.guru/#0_23_*_*_*) " -e -i "0 23 * * *" CRON
mkdir /bc/
#                 
if [[ -e IDs.txt ]];then
ID="$(cat IDs.txt)"
else
    read -rp "Qual é o ID da pasta no google Drive caso fará backup para A Nuven (Exemplo: 1-FWzQJWhhJK_00ETU4uVOg6R5c5p_yMP)? " -e -i "" ID
    echo "$ID" > $PASTA_PRINCIPALIDs.txt
    dos2unix $PASTA_PRINCIPALIDs.txt
fi
if [[ -e $PASTA_PRINCIPALpasta.txt ]];then
    MINE2Sh23="$(cat $PASTA_PRINCIPALpasta.txt)"
else
    read -rp "Aonde você vai quere colocar os Backups Locais (Caso queira)? " -e -i "$MINE2Sh23" MINE2Sh23
    echo $MINE2Sh23 > $PASTA_PRINCIPALpasta.txt
    dos2unix $PASTA_PRINCIPALpasta.txt
fi
mkdir $MINE2Sh23
cp -rf $TMP/backup-mcpe.sh /tmp/backup.sh
sed -i "s|IDSh23|$ID|g" "/tmp/fundo.sh";
sed -i "s|MINESh23|$PATH_TO_INSTALL|g" "/tmp/backup.sh";
sed -i "s|NAMESh23|$MAPA_DO_SERVIDOR|g" "/tmp/backup.sh";
sed -i "s|MINE2Sh23|$MINE2Sh23|g" "/tmp/backup.sh";
rm -rf /bc/backup-mcpe.sh
cp -rf /tmp/backup.sh /bc/backup-mcpe.sh
# 
echo "adiciona essa linha a seguir no crontab"
echo "$CRON bash /bc/backup-mcpe.sh"
read -rp "De [ENTER] para continua" -e -i "" NULL
crontab -e
}

enable_trapping
setup_scroll_area

if [[ -e /etc/bds-install/install.json ]];then
json
else
echo "Por favor Adiciona install.json no /etc/bds-install/"
fi
root_acess
if [[ $DESKTOP_GTK_SH23 = yes ]];then
read -rp "oque vai quere fazer" -e -i "" 1
fi

case $1 in
--install | -i )  installbysh23 ;;
--update | -u ) updatebysh23 ;;
--backup | -b ) backupbysh23 ;;
--start-on-system | -s ) sistemabysh23 ;;
--ip | -P ) ipbysh23 ;;
--apache2 | --page | -a ) apache2-installbysh23 ;;
--files | -f ) externobysh23 ;;
--remover-service | -R ) removerservicesh23 ;;
--crontab | -c ) crontabsh23 ;;
--help | -h ) cat help.txt ; echo " ";;
--teste ) echo "$0 $1 $2 $3 $4 $5";;
*) echo "Exeute $0 --help - o comando $0 $1 não existe aqui";echo " "
esac
destroy_scroll_area


# --------------- Codigo ------------------------------

echo " "
echo "--------------"
echo " "
echo "qualquer erro no script me comunique no https://github.com/Sirherobrine23/Minecraft-Bedrock-auto-install/issues"
echo "Terminamos as $(TZ=UTC+3 date +"%H:%M:%S")"
 rm -rf mcpe.zip
echo " "
